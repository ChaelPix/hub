================
reStructuredText
================

Le langage utilisé pour écrire les fichiers sources du site est ``reStructuredText`` (``reST``).
C'est un langage de markup comme le Markdown. 

.. contents:: Sommaire
    :depth: 4

Texte
#####

Les blocs de texte fonctionnent comme en Markdown. Il suffit d'écrire du texte pour qu'il soit
affiché sur la page. Un retour à la ligne n'est pas pris en compte et le texte sera concaténé.

.. code-block::

    Ces deux lignes seront
    concaténées en une seule.

Il n'est pas réellement possible de revenir à la ligne : revenir à la ligne revient à créer un
nouveau paragraphe. Pour cela, il faut laisser une ligne vide entre deux blocs de texte.

.. code-block::

    Ceci est un paragraphe.

    Ceci est un autre paragraphe.

Mise en avant
*************

Pour mettre en avant du texte comme ``ceci``, il faut l'entourer de deux "`" de chaque côté
(apostrophe inversée, backtick en anglais, sur la touche 7 d'un clavier AZERTY).

.. code-block:: rest

    Ce ``mot`` est mis en avant.

Gras
****

Pour mettre du texte en **gras**, il faut l'entourer de deux astérisques de chaque côté.

.. code-block:: rest

    Ce **mot** est en gras.

Italique
********

Pour mettre du texte en *italique*, il faut l'entourer d'un seul astérisque de chaque côté.

.. code-block:: rest

    Ce *mot* est en italique.

Commentaire
***********

Il est possible de mettre des commentaires dans le code source, qui ne seront bien entendu pas
visible sur le site. Il suffit de commencer une ligne par deux points se suivant "..". Vous pouvez
revenir à la ligne et conserver le commentaire en indentant votre texte (peu importe l'indentation).
Cependant, vous ne pouvez pas sautez de ligne.

.. code-block:: rest

    .. Ceci est un commentaire, il ne sera pas pris en compte lors de la conversion du site en HTML.
       Cette ligne est aussi un commentaire car elle est indentée.
     Et celle-ci aussi, même si elle n'est indentée que d'un seul espace :)

.. Ceci est un commentaire, bien évidemment il n'est pas visible sur le site. Coucou à ceux qui
   passent par là :)

Liste
*****

Comme en MarkDown, il suffit d'utiliser "-" pour faire une liste. Les différentes indentations
créent les différents niveaux.

.. code-block:: rest

    Liste de courses :

    - Beurre salé
    - Lait
    - Fruits / légumes
        - Fruits
            - Pommes
            - Oranges
            - Bananes
      - Légumes
            - Poireaux
            - Épinards
            - Salades

Voici le rendu :

- Beurre salé
- Lait
- Fruits / légumes
    - Fruits
        - Pommes
        - Oranges
        - Bananes
    - Légumes
        - Poireaux
        - Épinards
        - Salades

Lien hypertexte
***************

Il est possible de mettre un lien vers un site internet de différentes manières. Voici deux façons
différentes, avec ou sans un texte de remplacement :

.. code-block:: rest

    https://lien-vers-le-site.com

    `texte remplaçant <https://lien-vers-un-autre-site.com>`_

Voici un exemple d'utilisation :

.. code-block:: rest

    Voici un lien vers la page d'accueil de `Google <https://www.google.com/>`_.
    
    Il suffit d'aller sur https://www.sphinx-doc.org/en/master/ pour accéder à la documentation
    de Sphinx.

Voici le rendu (indenté pour le distinguer du reste de la page) :

    Voici un lien vers la page d'accueil de `Google <https://www.google.com/>`_.
    
    Il suffit d'aller sur `<https://www.sphinx-doc.org/en/master/>`_ pour accéder à la documentation
    de Sphinx.

Il est aussi possible de séparer la déclaration du site et son utilisation dans la page de la
manière suivante :

.. code-block:: rest

    .. _`nom lien`: https://un-lien-quelconque.com

Voici son utilisation :

.. code-block:: rest

    `nom lien`_

Voici un exemple :

.. code-block:: rest

    .. _`le lien vers google`: https://www.google.com/

    Voici `le lien vers google`_.

Voici le rendu (indenté pour le distinguer du reste de la page). Bien entendu, la ligne déclarant la
référence n'est pas visible sur le site, mais ayez confiance, elle est bien là :)

.. _`le lien vers google`: https://www.google.com/

    Voici `le lien vers google`_.

Référence à la documentation
****************************

Référence interne
=================

Il est possible de faire des références au contenu d'une page de différentes manières.

Titre
-----

Il est possible de faire référence à un titre de la page. Pour en savoir plus sur les titres, lisez
la partie `Titres`_.

.. code-block:: rest

    Voici un lien vers le titre de cette page `reStructuredText`_.

    Voici un lien vers la partie que vous êtes en train de lire `Référence interne`_ :)

Voici le rendu (indenté pour le distinguer du reste de la page)

    Voici un lien vers le titre de cette page `reStructuredText`_.

    Voici un lien vers la partie que vous êtes en train de lire `Référence interne`_ :)

Arbitraire
----------

.. _ref exemple:

Il est possible de définir une référence à un endroit précis d'une page et d'ensuite lui faire
référence, que ce soit dans la même page ou dans une autre.

La référence se définit de cette façon : 

.. code-block:: rest

    .. nom de la référence:

Le lien vers cette référence peut être défini en définissant un texte de remplacement :

.. code-block:: rest

    :ref:`texte remplaçant <nom de la référence>`

Pour l'exemple, une référence nommée ``ref exemple`` a été placée dans le code source de la page,
juste au début de cette partie.

.. code-block:: rest

    .. _ref-exemple: # Définition de la référence

    Ce :ref:`lien <ref exemple>` vous emmène au début de cette partie.

Voici le rendu (indenté pour le distinguer du reste de la page) :

    Ce :ref:`lien <ref exemple>` vous emmène au début de cette partie.

Inter-texte
-----------

Il est possible de définir une référence en plein milieu d'un texte de la façon suivante :

.. code-block:: rest

    _`nom de la référence`

Le lien vers une référence définie de cette façon s'utilise ainsi :

.. code-block:: rest

    `nom de la référence`_

Par exemple, une _`référence inter-texte` est placée dans le code source de la page en plein milieu
de la ligne que vous êtes en train de lire :

.. code-block:: rest

    Par exemple, une _`référence inter-texte` est placée ... # Définition de la référence

    Ce lien emmène vers la `référence inter-texte`_ !

Voici le rendu (indenté pour le distinguer du reste de la page) :

    Ce lien emmène vers la `référence inter-texte`_ !

Autre page
==========

Il est possible de faire référence à d'autres pages de la documentation en utilisant le mot-clé
``doc``. Le texte affiché par la référence sera le nom de la page, s'il n'est pas changé dans la
déclaration de la référence. La page peut être spécifiée de manière relative à la page où vous
écrivez ou de manière absolue depuis la racine des pages de la documentation (méthode recommandée,
car moins soumise aux erreurs). La référence se déclare de la manière suivante :

.. code-block:: rest

    :doc:`/lien/vers/la/page`

    :doc:`texte affiché </lien/vers/la/page>`

Voici un exemple de référence vers d'autres pages :

.. code-block:: rest

    Vous trouverez le glossaire sur cette :doc:`page </glossary>`.

    N'hésitez pas à aller sur :doc:`website` pour trouver des informations globales sur le site de
    cette documentation.

À noter que la page ``website`` spécifiée dans l'exemple juste au-dessus est la page expliquant le
site de la documentation qui se trouve juste à côté de celle que vous lisez dans les fichiers du
site. Ainsi, pour y accéder de manière relative, il suffit de préciser son nom. Il est possible
d'utiliser ``../`` pour remonter dans l'architecture des fichiers du site et accéder à d'autres
pages.

Voici le rendu (indenté pour le distinguer du reste de la page). 

    Vous trouverez le glossaire sur cette :doc:`page </glossary>`

    N'hésitez pas à aller sur :doc:`website` pour trouver des informations globales sur le site de
    cette documentation.

.. _directive:

Directives
##########

Les directives sont des mot-clés qui servent d'instruction pour le rendu de la page. Elles ont
plusieurs fonctionnalités citées dessous. Pour utiliser une directive, il faut commencer la ligne
par deux points qui se suivent ``..``. Une directive se déclare de cette manière :

.. code-block:: rest

    .. nom_de_la_directive::

Ensuite, en fonction de l'utilité de la directive, il est possible de lui passer un argument juste
après sa déclaration. Pour finir, le contenu de la directive s'indique après un saut de ligne et une
indentation.

.. code-block:: rest

    .. nom_de_la_directive:: argument_de_la_directive

        Ce texte est le contenu de la directive, il sera traité et affiché en fonction de ce que
        fait la directive :)

Rôles
*****

Les rôles permettent d'indiquer comment la directive doit se comporter : ce sont les paramètres
d'une directive. Ils s'indiquent entre double point juste en dessous de la directive les uns en
dessous des autres, sans aucun saut de ligne. Si un rôle a un argument, il s'indique sur la même
ligne que le rôle, après un espace. Voici un exemple de directive avec des rôles :

.. code-block:: rest

    .. nom_de_la_directive::
        :premier_role: argument
        :deuxieme_role:

Liste de directives communes
****************************

Voici certaines directives couramment utilisées. Ce n'est pas du tout une liste exhaustive.

Bloc de code
============

La directive du bloc de code est ``code-block`` et possède plusieurs rôles. Il est possible
d'ajouter le nom d'un langage de programmation à la suite de la directive afin que le rendu du bloc
de code soit fait en fonction de ce langage. La liste des langages est trouvable sur ce
`lien <https://pygments.org/languages/>`__. De plus, la liste de tous les rôles de la directive
``code-block`` est trouvable `ici <https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-code-block>`__.
Un rôle très utile est la ``:caption:`` qui permet de mettre un titre au bloc de code.

Exemple de directive :

.. code-block:: rest

    .. code-block:: python
        :caption: Bloc de test d'exemple

        # Ceci est un bloc de code en Python
        def add(a, b):
            return a + b

Et voici son rendu :

.. code-block:: python
    :caption: Bloc de test d'exemple

    # Ceci est un bloc de code en Python
    def add(a, b):
        return a + b

.. _toctree:

"Toctree"
=========

La directive ``toctree`` n'est pas une directive native au reST. Elle provient de Sphinx et n'est
comprise que par la librairie. Elle permet de définir l'organisation des pages d'une section de la
documentation. Vous pouvez trouver sa documentation `ici <https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#table-of-contents>`_.

Le contenu de la directive sont les noms des fichiers reST (sans l'extension) qui compose la section
du site décrite. Cela permet à Sphinx de comprendre l'architecture de la documentation, de la page
d'accueil à toutes les pages et sous-pages. Cette directive se trouve souvent dans un fichier nommé
``index.rst`` qui est la page d'accueil de la section. La ``toctree`` peut contenir un autre fichier
``index.rst`` qui contient une autre ``toctree`` pour définir une autre section, etc. C'est ainsi
que se construisent les ramifications de la documentation.

En plus d'être utile à Sphinx, la ``toctree`` se traduit par un sommaire visible et cliquable sur la
page.

Par exemple, l'organisation des fichiers de la section "Contribuer" que vous êtes en train de lire
est la suivante :

.. code-block::

    contribute/
      ├─ index.rst
      ├─ rest.rst
      └─ website.rst

Le fichier ``rest.rst`` est le code source de la page que vous êtes en train de lire,
``website.rst`` est la page d'explication du site et ``index.rst`` est la page d'accueil de la
section "Contribuer". Dans celle-ci, on retrouve la déclaration de la ``toctree`` qui gère cette
section.

.. code-block:: rest

    .. toctree::
    :maxdepth: 1

        website
        rest

De base, ce sont les titres des pages qui sont choisis pour être affichés dans le sommaire crée par
une ``toctree``. Il est possible de changer ça en remplaçant le nom de la page dans la ``toctree``
par le texte que vous voulez afficher dans le sommaire puis le nom de la page entre "<>".

.. code-block:: rest

    .. toctree::
    :maxdepth: 1

        Notre site <website>
        rest

Il existe différents rôles pour la directive ``toctree``, en voici quelques-uns intéressants :

- ``:caption: nom_affichée`` : Permet de nommer le sommaire
- ``:name: nom_pour_ref`` : Permet de nommer la ``toctree`` pour la référencer avec ``:ref:``
- ``:hidden:`` : N'affiche pas le sommaire sur la page. La ``toctree`` est donc uniquement utile à
  Sphinx pour comprendre l'organisation des pages de la documentation
- ``:numbered:`` : Numérote le sommaire
- ``:maxdepth:`` : Indique la profondeur du sommaire à afficher
 
Sommaire
========

Pour afficher un sommaire, il faut utiliser la directive ``contents``. Contrairement à la directive
``toctree``, c'est une directive native du reST. Il suffit d'ajouter cette directive pour créer un
sommaire cliquable complet de la page dans laquelle le sommaire est placé. Il est possible de mettre
un titre en rajoutant du texte après les "::" de la directive.

Un rôle utile est ``:depth:`` qui permet de définir la profondeur du sommaire affiché.

Exemple de sommaire :

.. code-block:: rest

    .. contents:: Voici le sommaire de cette page :)
        :depth: 2

Et voici son rendu

.. contents:: Voici le sommaire de cette page :)
    :depth: 2

Mise en avant de texte (admonition)
===================================

Il est possible de mettre en avant du texte dans une boîte de couleur avec une petite annotation. Le
nom officiel de cette directive est "``admonition``". La liste des différentes admonitions est la
suivante : ``attention``, ``caution``, ``danger``, ``error``, ``hint``, ``important``, ``note``,
``tip``, ``warning``. Cependant, il faut noter que leur implémentation dépend du thème. Certains
thèmes n'implémentent pas toutes les admonitions ou réutilisent le même design pour plusieurs
admonitions. Vous pouvez en apprendre plus sur notre thème :ref:`ici <theme>`

Voici les différents rendus des admonitions avec notre thème.

.. attention::

    Attention à ce texte !

.. caution::

    Prudence à ce texte !

.. danger::

    Ce texte signale un danger !

.. error::

    Ce texte signale une erreur !

.. hint::

    Ce texte est une indication !

.. important::

    Ce texte est important !

.. note::

    Ce texte est une remarque !

.. tip::

    Ce texte est une astuce !

.. warning::

    Ce texte est un avertissement !

Il est possible de faire une admonition générique en utilisant la directive ``admonition``. Son nom
se spécifie sur la même ligne que l'admonition. Le texte à l'intérieur se spécifie comme celui d'une
directive classique.

.. code-block:: rest

    .. admonition:: Admonition personnalisée

        Ceci est une admonition personnalisée !

Le rendu est le suivant :

.. admonition:: Admonition personnalisée

    Ceci est une admonition personnalisée !

Titres
######

Il est possible d'organiser une page en mettant des titres à des chapitres, parties, sous-parties,
etc. Pour cela, il suffit d'écrire le titre et de le souligner avec certains caractères définis par
le reST. Il faut au moins écrire autant de caractères que la longueur du titre, en mettre moins
provoquera une erreur, en mettre plus n'est pas un souci.

Officiellement, vous pouvez utiliser n'importe quel caractère parmi les suivants pour définir
n'importe quel niveau de titre :

- ``#``
- ``*``
- ``=``
- ``-``
- ``^``
- ``"``

Voici un exemple :

.. code-block:: rest

    Voici un titre !
    ================

    Sphinx évoquera une erreur ici !
    #############################

    Voici un autre titre !
    **************************

Il est aussi possible de surligner la ligne, en plus de la souligner, mais la distinction avec un
titre uniquement souligné n'est pas très claire. Ainsi, mieux vaut limiter son utilisation.

Comme expliqué juste au-dessus, il n'y a officiellement pas de règle à respecter pour le choix des
caractères. Sphinx détermine automatiquement quel format appliquer à un titre en fonction de
l'enchainement des titres et de leurs caractères. Cependant, une convention existe que nous tentons
de respecter dans la documentation, la voici :

.. code-block::

    ================
    Titre de la page
    ================

    Chapitre
    ########

    Partie
    ******

    Section
    =======

    Sous-section
    ------------

    Sous-sous-section
    ^^^^^^^^^^^^^^^^^

    Paragraphe
    """"""""""

Notez que la signification des parties ("Chapitre", etc) n'est là que pour indication, ce qui est
important, c'est le niveau de profondeur de chaque caractère.
