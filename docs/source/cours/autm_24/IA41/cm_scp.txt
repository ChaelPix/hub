Fabrice LAURI
CM #7
IA41
Concepts fondamentaux en Intelligence Artificielle
et langages dédiés
Problèmes avec
satisfaction
de contraintes
Problèmes de satisfaction
de contraintes
- Introduction
- Définitions
- Exemples de CSP : fabrication sous contraintes d'un modèle
 de voiture, les N dames
- Algorithmes de résolution de CSP :
- Generate & Test,
- Test & Generate (Backtrack ou BT)
- Présentation et utilisation de la librairie PROLOG clp/bounds
 pour la résolution d'un CSP binaire

Problèmes de satisfaction
de contraintes
- Introduction
- Définitions
- Exemples de CSP : fabrication sous contraintes d'un modèle
 de voiture, les N dames
- Algorithmes de résolution de CSP :
- Generate & Test,
- Test & Generate (Backtrack ou BT)
- Présentation et utilisation de la librairie PROLOG clp/bounds
 pour la résolution d'un CSP binaire

Introduction
Les CSP (Constraint Satisfaction Problems) regroupent :
- une partie des problèmes d'Intelligence Artificielle (satisfiabilité
 d'un ensemble de clauses...)
- une partie des problèmes de Recherche Opérationnelle (problè-
 mes d'ordonnancement...)
Exemples
- programmation linéaire
- programmation linéaire avec des nombres entiers
Domaines d'application très variés
- raisonnement géométrique
- ordonnancement de tâches
- élaboration d'emplois du temps
- résolution de puzzles
Problèmes de satisfaction
de contraintes
- Introduction
- Définitions
- Exemples de CSP : fabrication sous contraintes d'un modèle
 de voiture, les N dames
- Algorithmes de résolution de CSP :
- Generate & Test,
- Test & Generate (Backtrack ou BT)
- Présentation et utilisation de la librairie PROLOG clp/bounds
 pour la résolution d'un CSP binaire

Une contrainte est une relation logique (une propriété qui doit être
vérifiée).
Elle lie différentes inconnues, appelées variables.
Chaque variable prend ses valeurs dans un ensemble donné, appelé
domaine de valeurs.
Ainsi, une contrainte restreint les valeurs que peuvent prendre
simultanément ses variables associées.
Par exemple, la contrainte "x + 3*y = 12" restreint les valeurs que l'on
peut affecter simultanément aux variables x et y.
Grande variété de types de contraintes, classés selon :
- nature des domaines de valeurs
- langage d'expression
- situation qu'elles décrivent
Dans ce cours : problèmes de satisfaction de contraintes exprimés en
extension, dans des domaines finis.
Qu’est ce qu’une contrainte ?
Grande variété de types de contraintes, classés selon :
- la nature des domaines de valeurs
- le langage d'expression
- les situations qu'elles décrivent
Dans ce cours :
Problèmes de satisfaction de contraintes exprimés en extension,
dans des domaines finis.
Qu’est ce qu’une contrainte ?
Une contrainte est relationnelle.
Elle n'est pas "dirigée" comme une fonction qui définit la valeur d'une
variable en fonction des valeurs des autres variables.
Ainsi, la contrainte "x - 2*y = z" permet de déterminer :
- z dès lors que x et y sont connues,
- x dès lors que y et z sont connues,
- y dès lors que x et z sont connues.
Quelques caractéristiques des
contraintes
Notons également qu'une contrainte est déclarative.
Elle spécifie quelle relation existe entre les variables, sans donner de
procédure opérationnelle pour effectivement assurer/vérifier cette
relation.
Ainsi, lorsqu'on pose la contrainte "x - 2*y = z", on ne s'occupe pas de
donner un algorithme permettant de résoudre cette équation.
Quelques caractéristiques des
contraintes
Notons enfin que l'ordre dans lequel sont posées les contraintes n'est
pas significatif.
La seule chose importante à la fin est que toutes les contraintes soient
satisfaites…
Quelques caractéristiques des
contraintes
Une contrainte est une relation entre différentes variables.
Cette relation peut être définie en extension ou en intension.
Pour définir une contrainte en extension, on énumère les tuples de
valeurs appartenant à la relation.
Exemple :
- soient 2 variables x et y avec le même domaine de valeurs D={0,1,2},
- la contrainte "x est plus petit que y" peut être définie en extension par :
 - (x=0 et y=1) ou (x=0 et y=2) ou (x=1 et y=2)
 - ou (x,y) {(0,1),(0,2),(1,2)} ∈
Pour définir une contrainte en intention, on utilise des propriétés
mathématiques connues, comme vu précédemment.
Exemples :
- x < y
- A et B => non(C)
Définition d’une contrainte
L'arité d'une contrainte est le nombre de variables sur lesquelles
elle porte.
Une contrainte est :
- unaire si son arité est égale à 1 (une seule variable).
 Exemple : x*x = 4 ou est-un-triangle(y)
- binaire si son arité est égale à 2 (deux variables).
 Exemple : x ≠ y ou A U B = A
- ternaire si son arité est égale à 3 (trois variables).
 Exemple : x+y < 3*z-4 ou (non x) ou y ou z = vrai
- n-aire si son arité est égale à n. On dira également dans ce cas
 que la contrainte est globale.
 Exemple : contrainte globale courante (et très pratique) est la
 contrainte toutesDifférentes(E), où E est un ensemble de
 variables, qui contraint toutes les variables appartenant à E à
 prendre des valeurs différentes.
Arité d’une contrainte
Différents types de contraintes en fonction des domaines de valeurs
des variables :
● Contraintes numériques, portant sur des variables à valeurs
numériques.
Une contrainte numérique est une égalité (=) , une différence (≠) ou
une inégalité (<, ≤, >, ≥) entre 2 expressions arithmétiques.
On distingue :
● les contraintes numériques sur les réels : les variables de la
contrainte peuvent prendre des valeurs réelles
Exemple : U = R*I
● les contraintes numériques sur les entiers : les variables de la
contrainte ne peuvent prendre que des valeurs entières
Exemple : contrainte sur le nombre de personnes pouvant
embarquer dans un avion.
Différents types de contraintes
● Pour les contraintes numériques :
On distingue également :
● les contraintes numériques linéaires : les expressions
arithmétiques sont linéaires.
Exemple : 4*x - 3*y + 8*z < 10
● les contraintes numériques non linéaires : les expressions
arithmétiques contiennent des produits de variables, ou des
fonctions logarithmiques, exponentielles…
Exemple : x² = 2 ou sin(x) + z*log(y) = 4
Différents types de contraintes
On distingue différents types de contraintes en fonction des domaines
de valeurs des variables :
● Les contraintes booléennes, portant sur des variables à valeur
booléenne (vrai ou faux).
Une contrainte booléenne est une implication (=>), une équivalence
(<=>) ou une non équivalence (<≠>) entre 2 expressions logiques.
Exemple :
- (non a) ou b => c
- non (a ou b) <=> (c et d)...
Différents types de contraintes
Définition d'un CSP
Un CSP P = ( X, D, C ) est défini par :
- une séquence X = (x1, x2, ..., xn) de n variables
- une séquence D = (d1, d2, ..., dn) de n domaines finis. Chaque
 di est associé à xi.
- une séquence C = (c1, c2, ..., cm) de m contraintes.
Chaque contrainte ci est définie par un couple (vi, ri) tel que :
- vi est une séquence de variables tel que vi ⊂ X sur lesquelles
 porte la contrainte ci. Elle est exprimée en extension.
- ri est un sous-ensemble du produit cartésien des domaines
 associés aux variables de vi. Il est exprimé en extension.
Arité d'une contrainte ci : taille de la séquence vi.
Un CSP est d'arité N si toutes ces contraintes sont d'arité N.
Exemple
Soit le CSP binaire P = ( X, D, C ) défini par :
Variables Domaines
x1 { a, b, c }
x2 { a, b, c }
x3 { a, b }
x4 { a, b }
x5 { a, b }
Contrainte Variables Relation
c1=(v1,r1) v1=(x3,x1) r1={(a,b),(a,c),(b,c)}
c2=(v2,r2) v2=(x3,x2) r2={(a,b),(a,c),(b,c)}
c3=(v3,r3) v3=(x3,x4) r3={(a,b)}
c4=(v4,r4) v4=(x3,x5) r4={(a,b)}
c5=(v5,r5) v5=(x4,x5) r5={(a,b)}
Exemple
Représentation du CSP binaire précédent à l'aide d'un graphe...
Légende :
- Noeud du graphe : domaine de valeurs de la variable étiquetant
 le noeud
- Arc du graphe : contraintes sur les couples de variables
Contrainte Variables Relation
c1=(v1,r1) v1=(x3,x1) r1={(a,b),(a,c),(b,c)}
c2=(v2,r2) v2=(x3,x2) r2={(a,b),(a,c),(b,c)}
c3=(v3,r3) v3=(x3,x4) r3={(a,b)}
c4=(v4,r4) v4=(x3,x5) r4={(a,b)}
c5=(v5,r5) v5=(x4,x5) r5={(a,b)}
Lorsqu'un CSP n'a pas de solution, on dit qu'il est surcontraint : il y
trop de contraintes et on ne peut pas toutes les satisfaire. Dans ce cas,
on peut souhaiter trouver l'affectation totale qui viole le moins de
contraintes possibles.
Un tel CSP est appelé max-CSP (max car on cherche à maximiser le
nombre de contraintes satisfaites).
Une autre possibilité est d'affecter un poids à chaque contrainte (une
valeur proportionnelle à l'importance de cette contrainte, et de chercher
l'affectation totale qui minimise la somme des poids des contraintes
violées.
Un tel CSP est appelé CSP valué (VCSP).
Notion de CSP surcontraint
Inversement, lorsqu'un CSP admet beaucoup de solutions différentes,
on dit qu'il est sous-contraint. Si les différentes solutions ne sont pas
toutes équivalentes, dans le sens où certaines sont mieux que
d'autres, on peut exprimer des préférences entre les différentes
solutions. Pour cela, on ajoute une fonction qui associe une valeur
numérique à chaque solution, valeur dépendante de la qualité de cette
solution. L'objectif est alors de trouver la solution du CSP qui maximise
cette fonction.
Un tel CSP est appelé CSOP (Constraint Satisfaction Optimisation
Problem).
Notion de CSP sous-contraint
Définitions (1/5)
Instanciation
Soit un CSP P = ( X, D, C ). Une instanciation A de Y ⊂ X est une
application qui associe à chaque variable de Y une valeur de son
domaine.
On notera A( Y ) la séquence des valeurs affectées aux variables
de la séquence Y ⊂ X par A.
Si X = Y, on dira que A est complète.
Sinon, on dira que A est partielle.
Satisfaction de contraintes
Une instanciation A de Y satisfait la contrainte ci = (vi, ri) de C,
noté A ╞ ci, ssi vi ⊂ Y et A( vi ) ∈ ri.
Taux de satisfiabilité d'une contrainte ci
Rapport entre le cardinal de ri et le cardinal du produit cartésien
des domaines des variables de vi.
Instanciation consistante
Soient un CSP P = ( X, D, C ) et une instanciation A de Y ⊂ X.
A est dite consistante ssi elle ne viole aucune contrainte, c-à-d :
ci = (vi, ri) ∈ C telle que vi ∈ Y, A ╞ ci.
Solution d'un CSP
Une solution S de P = ( X, D, C ) est une instanciation complète
consistante. On dit que l'instanciation S satisfait P, ou S ╞ P.
L'ensemble des solutions de P sera noté SP.
Consistance d'un CSP
P = ( X, D, C ) est consistant ssi SP ≠ .
Définitions (2/5)
Instanciation globalement consistante
Soit P = ( X, D, C ). Une instanciation A de Y ⊂ X est globalement
consistante ssi S  SP telle que A ⊂ S.
Equivalence de CSP
Les CSP P = ( X, D, C ) et P' = ( X', D', C' ) sont équivalents ssi
SP = SP'. On note alors P ≡ P'.
Résolution d'un CSP
Trouver l'ensemble des valeurs à affecter aux variables du
problème, ces valeurs devant satisfaire chacune des contraintes.
Définitions (3/5)
Consistance d'arc
Un CSP (X,D,C) est consistant d'arc si pour tout couple de
variables (Xi,Xj) de X, et pour toute valeur vi appartenant à
D(Xi), il existe une valeur vj appartenant à D(Xj) telle que
l'affectation partielle {(Xi,vi),(Xj,vj)} satisfasse toutes les
contraintes binaires de C.
Par exemple, si C contient la contrainte "X1 + X2 > 2", et si
D(X1)=D(X2)={0,1,2}, alors le CSP n'est pas consistant d'arc car
lorsque X1=0, il n'y a aucune valeur de D(X2) qui puisse
satisfaire la contrainte "X1 + X2 > 2". Pour qu'il soit consistant
d'arc, il faut enlever des domaines de X1 et X2 la valeur 0.
Définitions (4/5)
L'algorithme qui enlève les valeurs des domaines des variables d'un
CSP jusqu'à ce qu'il soit consistant d'arc (on dit que l'algorithme filtre
les domaines des variables) s'appelle AC (pour Arc Consistency).
Il existe différentes versions de cet algorithme: AC1, AC2, AC3, ...,
chaque version étant plus efficace (en général) que la précédente.
Pour plus d'informations sur les algorithmes AC, vous pouvez lire les articles scientifiques
suivants :
[AC1] : The complexity of some polynomial network consistency algorithms for constraint
satisfaction problems
A.K. Mackworth and E.C. Freuder, in Artificial Intelligence 25, pages 65-74, 1985.
[AC4] : Arc and path consistency revised
R. Mohr and T.C. Henderson, in Artificial Intelligence 28, pages 225-233, 1986.
[AC5] : Arc consistency for factorable relations
M. Perlin, in Artificial Intelligence 53, pages 329-342, 1992.
[AC5] : A generic arc-consistency algorithm and its specializations
P. Van Hentenryck, Y. Deville, and C.-M. Teng, in Artificial Intelligence 57, pages 291-321,
1992.
[AC6] : Arc-consistency and arc-consistency again
C. Bessiere, in Artificial Intelligence 65, pages 179-190, 1994.
[AC7] : Using constraint metaknowledge to reduce arc consistency computation
C. Bessiere, E.C. Freuder, and J.-R. Régin, in Artificial Intelligence 107, pages 125-148, 1999.
Consistance d’arc
Définitions (5/5)
Consistance de noeud
Un CSP (X,D,C) est consistant de noeud si pour toute variable Xi
de X, et pour toute valeur v de D(Xi), l'affectation partielle {(Xi,v)}
satisfait toutes les contraintes unaires de C.
Par exemple, si C contient la contrainte "X1 > 2", et si le domaine
de X1 contient les valeurs {1,2,3,4,5}, alors le CSP n'est pas
consistant de noeud. Pour qu'il soit consistant de noeud, il faut
enlever du domaine de X1 les valeurs 1 et 2 qui violent la
contrainte "X1 > 2".
Problèmes de satisfaction
de contraintes
- Introduction
- Définitions
- Exemples de CSP : fabrication sous contraintes d'un modèle
 de voiture, les N dames...
- Algorithmes de résolution de CSP :
- Generate & Test,
- Test & Generate (Backtrack ou BT)
- Présentation et utilisation de la librairie PROLOG clp/bounds
 pour la résolution d'un CSP binaire

« Une firme va proposer un nouveau modèle de voiture fabriquée
dans toute l'Europe :
- les pare-chocs sont peints uniquement en blanc à Palerme;
- les portières et le capot sont fabriqués et peints à Lille, où le
 constructeur ne dispose que de peinture rose, rouge et noire;
- la carrosserie est réalisée à Hambourg avec de la peinture
 blanche, rose, rouge ou noire;
- la bâche du toit ouvrant est peinte à Madrid en rouge;
- les enjoliveurs sont fabriqués et peints à Athènes, où l'on ne
 dispose que de peinture rose et rouge.
Le constructeur impose un certain agencement des couleurs :
- la carrosserie doit être de la même couleur que les portières, les
 portières de la même couleur que le capot, le capot de la même
 couleur que la carrosserie
- les enjoliveurs, les pare-chocs et le toit ouvrant doivent être plus
 clairs que la carrosserie. »
Exemple #1 : fabrication
sous contraintes d'une voiture
« Déterminer la position de N dames sur un échiquier de NxN
 cases. Aucune des N dames ne doit être attaquée par une
 autre. »
Exemple #2 : les N dames
Une dame attaque sur sa ligne, sa colonne et sa/ses diagonale(s).
Exemple #3 : distributeur de monnaie
On s'intéresse à un distributeur automatique de boissons. L'utilisateur
insère des pièces de monnaie pour un total de T centimes d'Euros,
puis il sélectionne une boisson, dont le prix est de P centimes d'Euros
(T et P étant des multiples de 10).
Il s'agit alors de calculer la monnaie à rendre, sachant que le
distributeur a en réserve E2 pièces de 2 €, E1 pièces de 1 €, C50
pièces de 50 centimes, C20 pièces de 20 centimes et C10 pièces de
10 centimes.
Il s'agit de colorier les 14 régions de la carte ci-dessous, de sorte que
deux régions ayant une frontière en commun soient coloriées avec des
couleurs différentes. On dispose pour cela des 4 couleurs suivantes :
bleu, rouge, jaune et vert.
Exemple #4 : coloriage de graphe
Problèmes de satisfaction
de contraintes
- Introduction
- Définitions
- Exemples de CSP : fabrication sous contraintes d'un modèle
 de voiture, les N dames
- Algorithmes de résolution de CSP :
- Generate & Test,
- Test & Generate (Backtrack ou BT)
- Présentation et utilisation de la librairie PROLOG clp/bounds
 pour la résolution d'un CSP binaire

Principe
On considère un espace où chaque état est une instanciation A.
Passer d'un état e1 à un état e2 consiste à étendre l'instanciation
de e1 en y ajoutant une variable avec toutes les valeurs possibles
de son domaine.
Une feuille de l'arbre : instanciation complète, dont il est facile de
vérifier si elle représente une solution ou non.
Remarque
Sur un CSP de n variables, avec des domaines de cardinal d et
m contraintes, l'ensemble des états terminaux (feuilles) a un
cardinal de dm, et on peut être amené à évaluer m * dm
contraintes...
Premier algorithme de résolution :
Generate & Test
Remarque
Si une instanciation viole une contrainte, toutes ses instanciations
filles ne seront pas consistante.
Autrement dit :
Toute affectation non consistante est non globalement
consistante.
Principe
Vérifier la satisfaction d'une contrainte dès que toutes ses variables ont été instanciées.
Lors du parcours en profondeur d'abord, dès qu'une impasse est
rencontrée (contrainte violée), un retour arrière est réalisé sur le
noeud père.
Deuxième algorithme de résolution :
Test & Generate (Backtrack)
Algorithme
Deuxième algorithme de résolution :
Test & Generate (Backtrack)
Backtrack( V, A )
Si V = ∅ Alors
A est une solution
Sinon
Soit xi ∈ V
Pour chaque v ∈ di Faire
Si A ∪ { xi → v } est consistante Alors
Backtrack( V - { xi }, A ∪ { xi → v } )
FinSi
FinPour
FinSi
V : séquence de variables
à instancier, initialement X.
A : instanciation, initialement
ensemble vide.
Trois ordres influencent le temps d'exécution de cet algorithme...
● L'ordre d'instanciation des variables (ordre vertical) influe sur la
 taille de l'espace exploré.
Heuristiques souvent utilisées :
- choix de la variable de plus petit domaine d'abord
- choix de la variable de degré maximum d'abord, c'est-à-dire
 participant au plus grand nombre de contraintes
- choix de la variable participant à la contrainte la moins
 satisfiable d'abord
- ...
Le nombre de noeuds explorés et le nombre de contraintes
vérifiées dépendent de l'heuristique utilisée.
Pour améliorer l'algorithme BT
Pour améliorer l'algorithme BT
● L'ordre d'instanciation des valeurs (ordre horizontal) influe aussi
 sur la taille de l'espace exploré.
● L'ordre de vérification des contraintes influe sur le nombre de
 tests à effectuer pour vérifier qu'une instantiation est consistante
 ou non.
Problèmes de satisfaction
de contraintes
- Introduction
- Définitions
- Exemples de CSP : fabrication sous contraintes d'un modèle
 de voiture, les N dames
- Algorithmes de résolution de CSP :
- Generate & Test,
- Test & Generate (Backtrack ou BT)
- Présentation et utilisation de la librairie PROLOG clp/bounds
 pour la résolution d'un CSP binaire

Cette librairie contient des prédicats qui facilite la résolution d'un
CSP P de la forme P = ( X, D, C ).
Utilisation dans SWI-Prolog
:- use_module( library( 'clp/bounds' ) ).
Prédicats de définition des domaines
Var in +Range
Le domaine de valeur de Var est Range. Range est de la forme
I..S, qui représente l'intervalle [I; S].
Exemple :
« Le domaine de valeurs de X1 est [1;5] » s'écrira en PROLOG :
X1 in 1..5
Librairie 'clp/bounds' (1/6)
Vars in +Range
Chaque variable de la liste de variables Vars a pour domaine
Range.
Exemple :
« Le domaine de valeurs des variables X1, X2, X3 et X4 est
[1;10] » s'écrira en PROLOG :
[X1,X2,X3,X4] in 1..10
ou
Vars=[X1,X2,X3,X4], Vars in 1..10
Librairie 'clp/bounds' (2/6)
Prédicat permettant d'établir des contraintes
all_different( +Vars )
Toutes les variables de Vars sont contraintes de telle manière à
ce que pour chaque couple (v1,v2) de valeurs associées à deux
variables dans Vars, v1 est différente de v2.
Exemple :
Vars = [X1,X2,X3], Vars in 1..3, all_different( [X1,X2,X3] ).
Alors :
- { X1=1,X2=2,X3=3 } sera une instanciation consistante,
- { X1=2,X2=3,X3=2 } sera une instanciation inconsistante,
Librairie 'clp/bounds' (3/6)
Prédicat permettant d'établir des contraintes
tuples_in( +Tuples, +Extension )
Permet de poser une ou plusieurs contraintes ci = (vi, ri).
Tuples est une liste composée de listes de N variables.
Extension est la liste des relations N-aires devant être satisfaites
par chacun des N-uplets de variables de Tuples.
Exemple :
tuples_in( [[X1,X2],[X2,X3]], [[1,2],[3,2]] ).
définit deux contraintes c1 et c2 :
- c1 = ( (X1,X2), { (1,2), (3,2) } ) et
- c2 = ( (X2,X3), { (1,2), (3,2) } )
Librairie 'clp/bounds' (4/6)
Prédicats permettant d'établir des contraintes
?E1 #Op ?E2, avec Op := { =, \=, >, <, >=, =< }
Les expressions E1 et E2 sont contraintes selon l'opérateur Op.
Exemples :
- X1 #= 3
- X2 #>= X4 + 5
- X3 #\= X5
...
Librairie 'clp/bounds' (5/6)
Prédicats de résolution
label( +Vars )
Toutes les variables de Vars sont instanciées avec des valeurs de
leurs domaines respectifs et telles que toutes les contraintes
soient satisfaites.
Exemple :
Vars = [X1,X2,X3],
Vars in 1..3,
all_different( Vars ),
label( Vars ).
Vars = [1,2,3] ; Vars = [1,3,2] ; Vars = [2,1,3] ; Vars = [2,3,1] ;
Vars = [3,1,2] ; Vars = [3,2,1]
Librairie 'clp/bounds' (6/6)